import { type User, type InsertUser, type Event, type InsertEvent, type Building, type InsertBuilding, type StudentTool, type InsertStudentTool, type Discussion, type InsertDiscussion, type Comment, type InsertComment, type SafetyAlert, type InsertSafetyAlert, type SafetyResource, type InsertSafetyResource, type LocationUpdate } from "@shared/schema";
export interface IStorage {
    getUser(id: number): Promise<User | undefined>;
    getUserByUsername(username: string): Promise<User | undefined>;
    createUser(user: InsertUser): Promise<User>;
    updateUserLocation(userId: number, locationUpdate: LocationUpdate): Promise<User | undefined>;
    getSharedLocations(): Promise<User[]>;
    getEvents(): Promise<Event[]>;
    getEvent(id: number): Promise<Event | undefined>;
    createEvent(event: InsertEvent): Promise<Event>;
    getBuildings(): Promise<Building[]>;
    getBuilding(id: number): Promise<Building | undefined>;
    createBuilding(building: InsertBuilding): Promise<Building>;
    getStudentTools(): Promise<StudentTool[]>;
    getStudentTool(id: string): Promise<StudentTool | undefined>;
    createStudentTool(tool: InsertStudentTool): Promise<StudentTool>;
    getDiscussions(): Promise<Discussion[]>;
    getDiscussion(id: number): Promise<Discussion | undefined>;
    createDiscussion(discussion: InsertDiscussion): Promise<Discussion>;
    getDiscussionsByCategory(category: string): Promise<Discussion[]>;
    getComments(discussionId: number): Promise<Comment[]>;
    getCommentReplies(commentId: number): Promise<Comment[]>;
    createComment(comment: InsertComment): Promise<Comment>;
    getUserComments(userId: number): Promise<Comment[]>;
    getAllComments(): Promise<Comment[]>;
    getSafetyAlerts(): Promise<SafetyAlert[]>;
    getActiveSafetyAlerts(): Promise<SafetyAlert[]>;
    getSafetyAlert(id: number): Promise<SafetyAlert | undefined>;
    createSafetyAlert(alert: InsertSafetyAlert): Promise<SafetyAlert>;
    getSafetyResources(): Promise<SafetyResource[]>;
    getSafetyResourcesByCategory(category: string): Promise<SafetyResource[]>;
    getSafetyResource(id: number): Promise<SafetyResource | undefined>;
    createSafetyResource(resource: InsertSafetyResource): Promise<SafetyResource>;
}
export declare class MemStorage implements IStorage {
    private users;
    private events;
    private buildings;
    private studentTools;
    private discussions;
    private comments;
    private safetyAlerts;
    private safetyResources;
    private currentUserId;
    private currentEventId;
    private currentBuildingId;
    private currentDiscussionId;
    private currentCommentId;
    private currentSafetyAlertId;
    private currentSafetyResourceId;
    constructor();
    getUser(id: number): Promise<User | undefined>;
    getUserByUsername(username: string): Promise<User | undefined>;
    createUser(insertUser: InsertUser): Promise<User>;
    updateUserLocation(userId: number, locationUpdate: LocationUpdate): Promise<User | undefined>;
    getSharedLocations(): Promise<User[]>;
    getEvents(): Promise<Event[]>;
    getEvent(id: number): Promise<Event | undefined>;
    createEvent(insertEvent: InsertEvent): Promise<Event>;
    getBuildings(): Promise<Building[]>;
    getBuilding(id: number): Promise<Building | undefined>;
    createBuilding(insertBuilding: InsertBuilding): Promise<Building>;
    getStudentTools(): Promise<StudentTool[]>;
    getStudentTool(id: string): Promise<StudentTool | undefined>;
    createStudentTool(tool: InsertStudentTool): Promise<StudentTool>;
    getDiscussions(): Promise<Discussion[]>;
    getDiscussion(id: number): Promise<Discussion | undefined>;
    createDiscussion(insertDiscussion: InsertDiscussion): Promise<Discussion>;
    getDiscussionsByCategory(category: string): Promise<Discussion[]>;
    getAllComments(): Promise<Comment[]>;
    getComments(discussionId: number): Promise<Comment[]>;
    getCommentReplies(commentId: number): Promise<Comment[]>;
    createComment(insertComment: InsertComment): Promise<Comment>;
    getUserComments(userId: number): Promise<Comment[]>;
    getSafetyAlerts(): Promise<SafetyAlert[]>;
    getActiveSafetyAlerts(): Promise<SafetyAlert[]>;
    getSafetyAlert(id: number): Promise<SafetyAlert | undefined>;
    createSafetyAlert(insertAlert: InsertSafetyAlert): Promise<SafetyAlert>;
    getSafetyResources(): Promise<SafetyResource[]>;
    getSafetyResourcesByCategory(category: string): Promise<SafetyResource[]>;
    getSafetyResource(id: number): Promise<SafetyResource | undefined>;
    createSafetyResource(insertResource: InsertSafetyResource): Promise<SafetyResource>;
    private initializeSampleData;
}
export declare const storage: MemStorage;
